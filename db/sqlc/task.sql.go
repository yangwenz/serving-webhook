// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: task.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "task" (task_id,
                    user_id,
                    model_name,
                    running_time,
                    status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, task_id, user_id, model_name, created_at, updated_at, running_time, status
`

type CreateTaskParams struct {
	TaskID      string        `json:"task_id"`
	UserID      pgtype.Text   `json:"user_id"`
	ModelName   string        `json:"model_name"`
	RunningTime pgtype.Float8 `json:"running_time"`
	Status      pgtype.Text   `json:"status"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.TaskID,
		arg.UserID,
		arg.ModelName,
		arg.RunningTime,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.ModelName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RunningTime,
		&i.Status,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM "task"
WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID string) error {
	_, err := q.db.Exec(ctx, deleteTask, taskID)
	return err
}

const deleteTaskBeforeDate = `-- name: DeleteTaskBeforeDate :exec
DELETE
FROM "task"
WHERE created_at < $1
`

func (q *Queries) DeleteTaskBeforeDate(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.Exec(ctx, deleteTaskBeforeDate, createdAt)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, task_id, user_id, model_name, created_at, updated_at, running_time, status
FROM "task"
WHERE task_id = $1
LIMIT 1
`

func (q *Queries) GetTaskById(ctx context.Context, taskID string) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, taskID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.ModelName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RunningTime,
		&i.Status,
	)
	return i, err
}

const getTaskByUser = `-- name: GetTaskByUser :many
SELECT id, task_id, user_id, model_name, created_at, updated_at, running_time, status
FROM "task"
WHERE user_id = $1
`

func (q *Queries) GetTaskByUser(ctx context.Context, userID pgtype.Text) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTaskByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.UserID,
			&i.ModelName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RunningTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByModelNameAndStatus = `-- name: GetTasksByModelNameAndStatus :many
SELECT id, task_id, user_id, model_name, created_at, updated_at, running_time, status
FROM "task"
WHERE model_name = $1
  AND status = $2
`

type GetTasksByModelNameAndStatusParams struct {
	ModelName string      `json:"model_name"`
	Status    pgtype.Text `json:"status"`
}

func (q *Queries) GetTasksByModelNameAndStatus(ctx context.Context, arg GetTasksByModelNameAndStatusParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByModelNameAndStatus, arg.ModelName, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.UserID,
			&i.ModelName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RunningTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE "task"
SET running_time = COALESCE($1, running_time),
    status       = COALESCE($2, status),
    updated_at   = COALESCE($3, updated_at)
WHERE task_id = $4
RETURNING id, task_id, user_id, model_name, created_at, updated_at, running_time, status
`

type UpdateTaskParams struct {
	RunningTime pgtype.Float8      `json:"running_time"`
	Status      pgtype.Text        `json:"status"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	TaskID      string             `json:"task_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.RunningTime,
		arg.Status,
		arg.UpdatedAt,
		arg.TaskID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.ModelName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RunningTime,
		&i.Status,
	)
	return i, err
}
