// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HyperGAI/serving-webhook/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/HyperGAI/serving-webhook/db/sqlc"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockStore) CreateTask(arg0 context.Context, arg1 db.CreateTaskParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockStoreMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockStore)(nil).CreateTask), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockStore) DeleteTask(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockStoreMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockStore)(nil).DeleteTask), arg0, arg1)
}

// DeleteTaskBeforeDate mocks base method.
func (m *MockStore) DeleteTaskBeforeDate(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskBeforeDate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskBeforeDate indicates an expected call of DeleteTaskBeforeDate.
func (mr *MockStoreMockRecorder) DeleteTaskBeforeDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskBeforeDate", reflect.TypeOf((*MockStore)(nil).DeleteTaskBeforeDate), arg0, arg1)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), arg0, arg1)
}

// GetTaskById mocks base method.
func (m *MockStore) GetTaskById(arg0 context.Context, arg1 string) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockStoreMockRecorder) GetTaskById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockStore)(nil).GetTaskById), arg0, arg1)
}

// GetTaskByUser mocks base method.
func (m *MockStore) GetTaskByUser(arg0 context.Context, arg1 pgtype.Text) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByUser indicates an expected call of GetTaskByUser.
func (mr *MockStoreMockRecorder) GetTaskByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByUser", reflect.TypeOf((*MockStore)(nil).GetTaskByUser), arg0, arg1)
}

// GetTasksByModelNameAndStatus mocks base method.
func (m *MockStore) GetTasksByModelNameAndStatus(arg0 context.Context, arg1 db.GetTasksByModelNameAndStatusParams) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByModelNameAndStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByModelNameAndStatus indicates an expected call of GetTasksByModelNameAndStatus.
func (mr *MockStoreMockRecorder) GetTasksByModelNameAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByModelNameAndStatus", reflect.TypeOf((*MockStore)(nil).GetTasksByModelNameAndStatus), arg0, arg1)
}

// Ping mocks base method.
func (m *MockStore) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping), arg0)
}

// UpdateTask mocks base method.
func (m *MockStore) UpdateTask(arg0 context.Context, arg1 db.UpdateTaskParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockStoreMockRecorder) UpdateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockStore)(nil).UpdateTask), arg0, arg1)
}
