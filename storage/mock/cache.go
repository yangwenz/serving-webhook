// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yangwenz/model-webhook/storage (interfaces: Cache)

// Package mockstore is a generated GoMock package.
package mockstore

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// getKey mocks base method.
func (m *MockCache) getKey(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// getKey indicates an expected call of getKey.
func (mr *MockCacheMockRecorder) getKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getKey", reflect.TypeOf((*MockCache)(nil).getKey), arg0, arg1)
}

// setKey mocks base method.
func (m *MockCache) setKey(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// setKey indicates an expected call of setKey.
func (mr *MockCacheMockRecorder) setKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setKey", reflect.TypeOf((*MockCache)(nil).setKey), arg0, arg1, arg2)
}
